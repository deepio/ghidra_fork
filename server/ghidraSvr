#! /bin/bash

#----------------------------------------
# Ghidra Server Script
#----------------------------------------

APP_NAME="ghidraSvr"
APP_LONG_NAME="Ghidra Server"
MODULE_DIR="Ghidra/Features/GhidraServer"
WRAPPER_NAME=yajsw-stable-12.12
SERVICE_NAME=org.rzo.yajsw.$APP_NAME

# Resolve symbolic link if present and get the directory this script lives in.
# NOTE: "readlink -f" is best but works on Linux only, "readlink" will only work if your PWD
# contains the link you are calling (which is the best we can do on macOS), and the "echo" is the 
# fallback, which doesn't attempt to do anything with links.
SCRIPT_FILE="$(readlink -f "$0" 2>/dev/null || readlink "$0" 2>/dev/null || echo "$0")"
SCRIPT_DIR="${SCRIPT_FILE%/*}"

# YAJSW likes absolute paths
cd "${SCRIPT_DIR}"
SCRIPT_DIR="$(pwd)"

OS="$(uname -s)"
if [ "$OS" = "Darwin" ]; then
	OS_DIRNAME="osx64"
else
	OS_DIRNAME="linux64"
fi

if [ -d "${SCRIPT_DIR}/../Ghidra" ]; then

	# Production Environment
	GHIDRA_HOME="${SCRIPT_DIR}/.."
	WRAPPER_CONF="${SCRIPT_DIR}/server.conf"
	WRAPPER_HOME="${GHIDRA_HOME}/${MODULE_DIR}/data/${WRAPPER_NAME}"
	OS_DIR="${GHIDRA_HOME}/${MODULE_DIR}/os/${OS_DIRNAME}"
	CLASSPATH_FRAG="${GHIDRA_HOME}/${MODULE_DIR}/data/classpath.frag"
	LS_CPATH="${GHIDRA_HOME}/support/LaunchSupport.jar"
else

	# Development Environment
	GHIDRA_HOME="${SCRIPT_DIR}/../../../.."
	WRAPPER_CONF="${SCRIPT_DIR}/../../Common/server/server.conf"
	WRAPPER_HOME="${GHIDRA_HOME}/${MODULE_DIR}/build/data/${WRAPPER_NAME}"
	OS_DIR="${GHIDRA_HOME}/${MODULE_DIR}/os/${OS_DIRNAME}"
	CLASSPATH_FRAG="${GHIDRA_HOME}/${MODULE_DIR}/build/dev-meta/classpath.frag"
	LS_CPATH="${GHIDRA_HOME}/GhidraBuild/LaunchSupport/bin"
fi

if [ ! -d "${WRAPPER_HOME}" ]; then
	echo "${WRAPPER_HOME} not found" | tee -a "${GHIDRA_HOME}/wrapper.log"
	exit 1
fi

# Make sure some kind of java is on the path.  It's required to run the LaunchSupport program.
if ! [ -x "$(command -v java)" ] ; then
	echo "Java runtime not found.  Please refer to the Ghidra Installation Guide's Troubleshooting section." | tee -a "${GHIDRA_HOME}/wrapper.log"
	exit 1
fi

# Get the java that will be used to launch GhidraServer
JAVA_HOME=$(java -cp "${LS_CPATH}" LaunchSupport "${GHIDRA_HOME}" -java_home)
if [ ! $? -eq 0 ]; then
	echo "Failed to find a supported Java runtime.  Please refer to the Ghidra Installation Guide's Troubleshooting section." | tee -a $GHIDRA_HOME/wrapper.log
	exit 1
fi
JAVA_CMD="${JAVA_HOME}/bin/java"

# All commands except 'console' require sudo mode
if [ -z "${SUDO_COMMAND}" -a ! -z "$1" -a "$1" != "console" ]; then
	sudo -p "`whoami` password: " "${SCRIPT_FILE}" $*
   	exit $?
fi 

enableForkHack() {

	HAS_FORK_HACK_LINE="$(grep "wrapper.fork_hack=" "${WRAPPER_CONF}")"
	if [ "${HAS_FORK_HACK_LINE}" = "" ]; then
		echo "ERROR: server.conf does not have fork_hack line - unable to fix it!"
		return 1
	fi
	
	# Enable fork_hack in server.conf
	ed "${WRAPPER_CONF}" <<EOF > /dev/null
/wrapper.fork_hack=
d
i
wrapper.fork_hack=true
.
w
q
EOF

	HAS_FORK_HACK_LINE=$(grep "^wrapper.fork_hack=true" "${WRAPPER_CONF}")
	if [ "${HAS_FORK_HACK_LINE}" = "" ]; then
		echo "ERROR: failed to install fork_hack in server.conf"
		return 1
	fi
	
	return 0
}

checkInstall() {
	# capture status text
	RESULT=$(java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -q "${WRAPPER_CONF}" | grep "Installed   :" | sed -E "s/Installed   : //")
	if [ "${RESULT}" = "true" ]; then
		return 0
	fi
	echo "ERROR: ${APP_NAME} service is not installed"
	return 1
}

console() {
    echo "Running ${APP_LONG_NAME}..."
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -c "${WRAPPER_CONF}"
}

start() {
    echo "Starting ${APP_LONG_NAME}..."
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -t "${WRAPPER_CONF}"
}
 
stopit() {
    echo "Stopping ${APP_LONG_NAME}..."
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -p "${WRAPPER_CONF}"
}

install() {
    echo "Installing ${APP_LONG_NAME}..."
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -i "${WRAPPER_CONF}"
}

uninstall() {
    echo "Uninstalling ${APP_LONG_NAME}..."
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -r "${WRAPPER_CONF}"
}

status() {
    java="${JAVA_CMD}" ghidra_home="${GHIDRA_HOME}" classpath_frag="${CLASSPATH_FRAG}" os_dir="${OS_DIR}" "${JAVA_CMD}" -jar "${WRAPPER_HOME}/wrapper.jar" -q "${WRAPPER_CONF}"
}

case "$1" in

    'console')
        enableForkHack
        console
        ;;
        
    'status')
        status 
        ;;

    'start')
    		checkInstall
    		if [ $? = 0 ]; then
        		start
        fi
        ;;

    'stop')
    		checkInstall
    		if [ $? = 0 ]; then
        		stopit
        fi
        ;;

    'restart')
    		checkInstall
    		if [ $? = 0 ]; then
        		stopit
        		start
        	fi
        ;;

    'install')
    		enableForkHack
        install
        start
        ;;

    'uninstall')
    		checkInstall
    		if [ $? = 0 ]; then
        		uninstall 
        fi
        ;;

    *)
        echo "Usage: $0 { console | start | stop | restart | status }"
        exit 1
        ;;
esac

exit 0
